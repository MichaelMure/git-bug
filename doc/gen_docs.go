package main

import (
	"fmt"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"

	"github.com/pkg/errors"
	"github.com/spf13/cobra/doc"

	"github.com/MichaelMure/git-bug/bridge"
	"github.com/MichaelMure/git-bug/commands"
)

const bridgeExampleFilePath = "commands/bridge_configure_doc.go"

func main() {
	fmt.Println("Generating documentation ...")

	tasks := map[string]func() error{
		"BridgeConfig": genBridgeConfig,
		"ManPage":      genManPage,
		"Markdown":     genMarkdown,
	}

	// Due to concurrency issues in cobra, the following can't be concurrent :(

	// var wg sync.WaitGroup
	for name, f := range tasks {
		// wg.Add(1)
		// go func(name string, f func() error) {
		// 	defer wg.Done()
		err := f()
		if err != nil {
			fmt.Printf("  - %s: %v\n", name, err)
			return
		}
		fmt.Printf("  - %s: ok\n", name)
		// }(name, f)
	}

	// wg.Wait()
}

// If a flag is not listed in flagInfos, docs will generate the default values for the flag:
// flagName = lowercase name
// defaultVal = $({uppercase name})
// paramConflicts = none
var flagInfos = map[string]BridgeFlagInfo{
	"BaseURL": {
		flagName:       "base-url",
		defaultVal:     "$(BASE_URL)",
		paramConflicts: []string{},
	},
	"CredPrefix": {
		flagName:   "credential",
		defaultVal: "$(CREDENTIALS)",
		paramConflicts: []string{
			"TokenRaw",
		},
	},
	"TokenRaw": {
		flagName:       "token",
		defaultVal:     "$(TOKEN)",
		paramConflicts: []string{},
	},
}

type BridgeFlagInfo struct {
	flagName       string
	defaultVal     string
	paramConflicts []string
}

var bridgeUrls = map[string]string{
	"github":            "https://github.com/MichaelMure/git-bug",
	"gitlab":            "https://gitlab.com/gitlab-org/gitlab",
	"launchpad-preview": "https://bugs.launchpad.net/ubuntu/",
	// TODO: Insert URL for Jira Project
}

// genBridgeConfig generates the bridge configuration documentation on go generate
// Documentation is stored in commands/bridge_configure_doc.go
func genBridgeConfig() error {
	var exampleText strings.Builder
	exampleText.WriteString("`")
	exampleText.WriteString(`# Interactive example
[1]: github
[2]: gitlab
[3]: jira
[4]: launchpad-preview

target: 1
name [default]: default

Detected projects:
[1]: github.com/a-hilaly/git-bug
[2]: github.com/MichaelMure/git-bug

[0]: Another project

Select option: 1

[1]: user provided token
[2]: interactive token creation
Select option: 1

You can generate a new token by visiting https://github.com/settings/tokens.
Choose 'Generate new token' and set the necessary access scope for your repository.

The access scope depend on the type of repository.
Public:
	- 'public_repo': to be able to read public repositories
Private:
	- 'repo'       : to be able to read private repositories

Enter token: 87cf5c03b64029f18ea5f9ca5679daa08ccbd700
Successfully configured bridge: default

`)
	targets := bridge.Targets()
	for i, b := range targets {
		if i != 0 {
			exampleText.WriteString("\n\n")
		}
		exampleText.WriteString("# For ")
		exampleText.WriteString(strings.Title(b))
		exampleText.WriteString("\ngit bug bridge configure \\\n")

		exampleText.WriteString("    --target=")
		exampleText.WriteString(strings.ToLower(b))
		exampleText.WriteString(" \\\n")

		params, err := bridge.ValidParams(b)
		if err != nil {
			return errors.Wrap(err, "bridge parameters")
		}

		for _, param := range params {
			if param == "BaseURL" {
				continue
			}

			paramString := formatParam(param, params, b)
			if paramString == "" {
				continue
			}

			exampleText.WriteString(paramString)
		}
	}
	exampleText.WriteString("`")

	_ = os.Remove(bridgeExampleFilePath)

	f, err := os.Create(bridgeExampleFilePath)
	if err != nil {
		return err
	}
	defer f.Close()

	_, err = f.WriteString(`// Code generated by doc/gen_docs.go; DO NOT EDIT.

package commands

var bridgeConfigureExample =`)
	if err != nil {
		return err
	}
	_, err = f.WriteString(exampleText.String())
	if err != nil {
		return err
	}

	return nil
}

const paramFormatString = "    --%s=%s \\\n"

// formatParam formats a parameter into a flag example in the command line
func formatParam(param string, params []string, bridge string) string {
	if flagInfo, ok := flagInfos[param]; ok {
		if checkParamConflicts(flagInfo.paramConflicts, params) {
			return ""
		}

		return fmt.Sprintf(paramFormatString, flagInfo.flagName, flagInfo.defaultVal)
	} else if param == "URL" {
		if exampleUrl, ok := bridgeUrls[bridge]; ok {
			return fmt.Sprintf(paramFormatString, "url", exampleUrl)
		}
	}

	return fmt.Sprintf(paramFormatString, strings.ToLower(param), "=$("+strings.ToUpper(param)+")")
}

// checkParamConflicts checks the parameter conflicts against the list of present parameters
// If a conflict is found, it returns true. Otherwise, it returns false
func checkParamConflicts(paramConflicts []string, params []string) bool {
	if len(paramConflicts) == 0 {
		return false
	}

	for p := range params {
		for conflict := range paramConflicts {
			if p == conflict {
				return true
			}
		}
	}
	return false
}

func genManPage() error {
	cwd, _ := os.Getwd()
	dir := path.Join(cwd, "doc", "man")

	date := time.Date(2019, 4, 1, 12, 0, 0, 0, time.UTC)

	header := &doc.GenManHeader{
		Title:   "GIT-BUG",
		Section: "1",
		Date:    &date,
		Source:  "Generated from git-bug's source code",
	}

	files, err := filepath.Glob(dir + "/*.1")
	if err != nil {
		return err
	}
	for _, f := range files {
		if err := os.Remove(f); err != nil {
			return err
		}
	}

	return doc.GenManTree(commands.NewRootCommand(), header, dir)
}

func genMarkdown() error {
	cwd, _ := os.Getwd()
	dir := path.Join(cwd, "doc", "md")

	files, err := filepath.Glob(dir + "/*.md")
	if err != nil {
		return err
	}
	for _, f := range files {
		if err := os.Remove(f); err != nil {
			return err
		}
	}

	return doc.GenMarkdownTree(commands.NewRootCommand(), dir)
}
