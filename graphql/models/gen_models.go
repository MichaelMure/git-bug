// Code generated by github.com/vektah/gqlgen, DO NOT EDIT.

package models

import (
	fmt "fmt"
	io "io"
	strconv "strconv"
	time "time"
)

type AddCommentOperation struct {
	Author  Person    `json:"author"`
	Date    time.Time `json:"date"`
	Message string    `json:"message"`
}
type Authored interface{}
type BugEdge struct {
	Cursor string `json:"cursor"`
	Node   Bug    `json:"node"`
}
type Comment struct {
	Author  Person `json:"author"`
	Message string `json:"message"`
}
type CommentEdge struct {
	Cursor string  `json:"cursor"`
	Node   Comment `json:"node"`
}
type ConnectionInput struct {
	After  *string `json:"after"`
	Before *string `json:"before"`
	First  *int    `json:"first"`
	Last   *int    `json:"last"`
}
type CreateOperation struct {
	Author  Person    `json:"author"`
	Date    time.Time `json:"date"`
	Title   string    `json:"title"`
	Message string    `json:"message"`
}
type LabelChangeOperation struct {
	Author  Person    `json:"author"`
	Date    time.Time `json:"date"`
	Added   []string  `json:"added"`
	Removed []string  `json:"removed"`
}
type Operation interface{}
type OperationEdge struct {
	Cursor string         `json:"cursor"`
	Node   OperationUnion `json:"node"`
}
type OperationUnion interface{}
type PageInfo struct {
	HasNextPage     bool `json:"hasNextPage"`
	HasPreviousPage bool `json:"hasPreviousPage"`
}
type Person struct {
	Email *string `json:"email"`
	Name  *string `json:"name"`
}
type SetStatusOperation struct {
	Author Person    `json:"author"`
	Date   time.Time `json:"date"`
	Status Status    `json:"status"`
}
type SetTitleOperation struct {
	Author Person    `json:"author"`
	Date   time.Time `json:"date"`
	Title  string    `json:"title"`
}

type Status string

const (
	StatusOpen   Status = "OPEN"
	StatusClosed Status = "CLOSED"
)

func (e Status) IsValid() bool {
	switch e {
	case StatusOpen, StatusClosed:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
